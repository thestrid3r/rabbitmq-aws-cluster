#cloud-config
write_files:
  - path : /tmp/docker.sh
    content: |
        #!/usr/bin/env bash
        set -x
        export AWS_DEFAULT_REGION='${region}'
        #querying the local instance private ip
        LOCALIP=`curl --silent http://169.254.169.254/latest/meta-data/local-ipv4`
        echo $LOCALIP
        DNSES=$(aws ec2 describe-instances --filters "Name=tag:aws:autoscaling:groupName,Values=rabbitmq" "Name=instance-state-name,Values=running" | jq ".Reservations[].Instances[].PrivateDnsName" | xargs)
        #querying the other node hostname
        HOSTNAMES=()
        for dns in $DNSES; do
            hostname=($${dns//./ })
            if [ "$hostname" != "$HOSTNAME" ]; then
              HOSTNAMES+=( $hostname )
            fi
        done
        echo $HOSTNAMES
        #querying the other node PrivateIPAddress
        IPADR=$(aws ec2 describe-instances --filters "Name=tag:aws:autoscaling:groupName,Values=rabbitmq" "Name=instance-state-name,Values=running" | jq ".Reservations[].Instances[].PrivateIpAddress" | xargs )
        REMOTEIP=()
        for ipa in $IPADR; do
            if [ "$ipa" != "$LOCALIP" ] ; then
                REMOTEIP+=( $ipa )
            fi
        done
        echo $REMOTEIP 
        docker run -d -p "4369:4369" -p "5672:5672" -p "15672:15672" -p "25672:25672" --name rabbitmq --hostname $HOSTNAME --add-host $HOSTNAME:$LOCALIP --add-host $HOSTNAMES:$REMOTEIP -e RABBITMQ_ERLANG_COOKIE='${secret_cookie}' -v /tmp/data:/var/lib/rabbitmq -v /tmp/conf/:/etc/rabbitmq -v /tmp/bin:/tmp/bin rabbitmq:3-management

  - path: /tmp/conf/enabled_plugins
    content: |
        [rabbitmq_management].
  - path: /tmp/conf/rabbitmq.config
    content: |
        [ { rabbit, [
          { loopback_users, [ ] } ] }
         ].
  - path: /tmp/find_hosts.sh
    content: |
        #!/usr/bin/env bash
        set -x
        export AWS_DEFAULT_REGION='${region}'
        DNSES=$(aws ec2 describe-instances --filters "Name=tag:aws:autoscaling:groupName,Values=rabbitmq" "Name=instance-state-name,Values=running" | jq ".Reservations[].Instances[].PrivateDnsName" | xargs)
        HOSTNAMES=()
        for dns in $DNSES; do
            hostname=($${dns//./ })
            if [ "$hostname" != "$HOSTNAME" ]; then
              HOSTNAMES+=( $hostname )
            fi
        done
        echo $HOSTNAMES
  - path: /tmp/bin/join_cluster.sh
    content: |
        #!/usr/bin/env sh
        HOSTNAMES=( $@ )
        for run in {1..3}; do
          sleep $[ ( $RANDOM % 10 )  + 1 ]s
          rabbitmqctl stop_app
          NEW_HOSTNAMES=()
          for hostname in $HOSTNAMES; do
            rabbitmqctl join_cluster rabbit@$hostname
            st=$?
            if [ $st -ne 0 ] && [ $st -ne 130 ]; then  # 130 is "already joined"
              NEW_HOSTNAMES+=( $hostname )
            fi
          done
          HOSTNAMES=( $${NEW_HOSTNAMES[@]} )
          rabbitmqctl start_app
          if [ $${#HOSTNAMES[@]} -eq 0 ]; then
            exit 0
          fi
        done
  - path: /tmp/configure.sh
    content: |
        #!/usr/bin/env bash
        set -x
        docker exec rabbitmq rabbitmqctl add_user admin ${admin_password}
        docker exec rabbitmq rabbitmqctl set_user_tags admin administrator
        docker exec rabbitmq rabbitmqctl add_user rabbit ${rabbit_password}
        docker exec rabbitmq rabbitmqctl add_vhost /
        docker exec rabbitmq rabbitmqctl set_policy -p / ha-three "^" '{"ha-mode":"exactly", "ha-params":${sync_node_count}, "ha-sync-mode":"automatic", "message-ttl":${message_timeout}, "expires":${message_timeout}}'
        docker exec rabbitmq rabbitmqctl set_permissions -p / admin ".*" ".*" ".*"
        docker exec rabbitmq rabbitmqctl set_permissions -p / rabbit ".*" ".*" ".*"
        docker exec rabbitmq rabbitmqctl delete_user guest

runcmd:
  - apt-get update
  - apt-get install python-pip jq -y
  - pip install awscli
  - curl -fsSL get.docker.com -o get-docker.sh
  - sh get-docker.sh
  - docker pull rabbitmq:3-management
  - bash /tmp/docker.sh
  - sleep 1
  - docker exec rabbitmq bash /tmp/bin/join_cluster.sh $(bash /tmp/find_hosts.sh)
  - sleep 1
  - bash /tmp/configure.sh